openapi: 3.0.1
info:
  title: Back-end Challenge 2021
  description: CRUD Users
  version: 0.0.1
servers:
  - url: http://192.168.1.64:8080/

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  responses:
    UnauthorizedError:
      description: API key não está presente no header
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - type: object
          required:
            - userid
          properties:
            userid:
              type: integer
              format: int64
            
    NewUser:
      type: object
      properties:
        gender:
          type: string
        name:
          type: object
          properties:
            title:
              type: string
            first:
              type: string
            last:
              type: string
        location:
          type: object
          properties:
            street:
              type: object
              properties:
                number:
                  type: integer
                name:
                  type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
            postcode:
              type: string
            coordinates:
              type: object
              properties:
                latitude:
                  type: string
                longitude:
                  type: string
            timezone:
              type: object
              properties:
                offset:
                  type: string
                description: 
                  type: string
        email:
          type: string
          format: email
        login:
          type: object
          properties:
            uuid:
              type: string
              format: uuid
            username:
              type: string
            password:
              type: string
            salt:
              type: string
            md5:
              type: string
            sha1:
              type: string
            sha256:
              type: string
        dob:
          type: object
          properties:
            date:
              type: string
              format: date
            age:
              type: integer
        required:
          type: object
          properties:
            date:
              type: string
              format: date
            age:
              type: integer
        phone:
          type: string
          format: phone
        cell:
          type: string
          format: phone
        id:
          type: object
          properties:
            name:
              type: string
            value:
              type: string
        picture:
          type: object
          properties:
            large:
              type: string
            medium:
              type: string 
            thumbnail:
              type: string
        nat:
          type: string
        imported_t:
          type: string
          format: date
        status:
          type: string
          enum:
            - DRAFT
            - TRASH
            - PUBLISHED
                

security:
  - ApiKeyAuth: []

paths:
  /:
    get:
      summary: Retorna uma mensagem com o nome do projeto
      responses:
        '200':
          description: OK
  /users:
    get:
      summary: Retorna uma lista de usuários.
      responses:
        '200':    
          description: Um array JSON com os dados de todos os usuários presentes
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/User'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '204':
          description: 'Não há usuários na base'
    post:
      summary: Cria um usuário.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses: 
        '201':
          description: Created
        '400':
          description: JSON inválido e incompatível com o objeto User
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        
  /users/{userId}:
    put:
      summary: Atualiza um usuário.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
        '400':
          description: JSON inválido para atualizar usuário
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Registro não existe na base para ser atualizado
    get:
      summary: Retorna um usuário pelo ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
      responses: 
        '200':
          description: OK
        '204':
          description: Usuário não encontrado na base
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Remover o user da base
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Não existe o usuário a ser deletado